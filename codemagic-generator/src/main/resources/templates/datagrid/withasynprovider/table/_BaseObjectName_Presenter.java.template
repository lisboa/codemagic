package ${package};

import db.assist.view.common.common.codegeneration.support.grid.toolbar.driver.IsGridToolbar;
import db.assist.view.common.common.codegeneration.support.grid.toolbar.driver.HasGridToolbar;
import db.assist.view.common.common.codegeneration.support.event.GridSelectionEvent;
import com.google.gwt.view.client.SelectionChangeEvent;
import com.google.gwt.view.client.SelectionChangeEvent.Handler;
import com.google.gwt.view.client.MultiSelectionModel;
import java.util.Set;
import org.gwtbootstrap3.client.ui.gwt.DataGrid;
import com.google.inject.Inject;
import com.google.web.bindery.event.shared.EventBus;
import com.gwtplatform.mvp.client.PresenterWidget;
import com.gwtplatform.mvp.client.View;
import com.gwtplatform.mvp.client.HasUiHandlers;
import ${fullDriverClassName};
import ${fullTargetEntityName};
import db.assist.view.common.common.codegeneration.support.grid.toolbar.GridToolbarPresenter;

public class ${BaseObjectName}Presenter extends 
		PresenterWidget<${BaseObjectName}Presenter.MyView> implements 
		${BaseObjectName}UiHandlers, Handler, HasGridToolbar {

	private final ${DriverClassName} driver;
	
	private final GridToolbarPresenter toolbarPresenter;
	
	@SuppressWarnings("CPD-START")
    interface MyView extends View , HasUiHandlers<${BaseObjectName}UiHandlers> {
    	DataGrid<${TargetEntityName}> getTable();
    }

    @Inject
    ${BaseObjectName}Presenter(
            final EventBus eventBus,
            final MyView view,
            final GridToolbarPresenter toolbarPresenter) {
        super(eventBus, view);
        
        getView().setUiHandlers(this);
        
        this.toolbarPresenter = toolbarPresenter;
        
        driver = new ${DriverClassName}( toolbarPresenter.getPager(), getView().getTable());
    }
    
    /**
	 * Catch the checkbox selection events of the datagrid. This is used to
	 * enable/disable a grid toolbar. If none rows is selected, only the add
	 * button is enable. If exactly one row is selected, the buttons edit and
	 * delete are enabled. If more than one row is selected, only the delete
	 * buttons is enabled.
	 */
	@Override
	public void onSelectionChange( final SelectionChangeEvent event ) {
		final GridSelectionEvent myEvent = new GridSelectionEvent();
		getEventBus().fireEventFromSource(myEvent, this);
	}
    
    public void refresh() {
		driver.init().refresh();
	}


 	@Override
    protected void onBind() {
    	super.onBind();
		registerHandler(getSelectionModel().addSelectionChangeHandler(this));
    }
    
	/**
     * 
     * @return A Set with the current selected rows
     */
    @Override
    @SuppressWarnings("CPD-END")
    public Set<${TargetEntityName}> getSelectedRows() {
    	return driver.getSelectionModel().getSelectedSet();
    }
    
    /**
	 * Give low level access to selection model. This allows, for example, to
	 * get the current selected rows (But prefer the method {@link #getSelectedRows()}. 
	 * <code>
	 *    final Set<${TargetEntityName}> selectedRows = driver.getSelectionModel().getSelectedSet();
	 * </code>
	 * 
	 * @return
	 */    
 	public MultiSelectionModel<${TargetEntityName}> getSelectionModel() {
		return driver.getSelectionModel();
	}
	
	public DataGrid<${TargetEntityName}> getTable() {
		return getView().getTable();
	}
	
	@Override
	public IsGridToolbar getGridToolbar() {
		return toolbarPresenter;
	}	
}